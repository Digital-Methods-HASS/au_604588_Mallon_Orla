---
title: "SA_HW_Week03"
author: "Orla Mallon"
date: "21/02/2021"
output:
  html_document: default
  pdf_document: default
---

Setting up the file with some basic adjustments 
```{r setup, include=FALSE}
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
               cache=TRUE,
               prompt=FALSE,
               tidy=TRUE,
               comment=NA,
               message=FALSE,
               warning=FALSE)
opts_knit$set(width=75)
```

#Description: We're looking at ancient inscriptions between rural and urban areas 
In this exercise you will map the ancient equivalent of Twitter data: the ancient inscriptions. Ancient people of class, education, and means liked to advertise their achievements and life milestones as well as their sorrows via the means of texts inscribed in stone. These epigraphic monuments were often placed near inhabited areas, roads, and gathering places where they were likely to attract the largest audience. The location of these self-expressions in space and time is a reasonable indicator of changing economic prosperity of the commissioning communities. In this exercise, you will explore how these ancient inscriptions spatially correspond to the distribution of ancient cities and settlements.  

```{r libraries, include=FALSE}
library(sf)
library(raster)
library(tidyverse)
library(leaflet)
library(dplyr)
library(knitr)
```

# Task 1: Load ancient cities and convert to sf object
```{r load-cities, eval=FALSE}
cities <- as.data.frame(read_csv("http://oxrep.classics.ox.ac.uk/oxrep/docs/Hanson2016/Hanson2016_Cities_OxREP.csv"))
```


... then reproject this data to EPSG 3035
```{r prj-cities, eval=FALSE}
# Convert the table into an sf object on the basis of X and Y columns
cities_sf <- st_as_sf(cities, coords = c("Longitude (X)", "Latitude (Y)"))
# Define the projection of Lat/Long coordinates as EPSG 4326
cities_sf4326<- st_set_crs(cities_sf, 4326)
# Transform the projection to a 2D projection using EPSG 3035
cities_sf3035<- st_transform(cities_sf4326, crs = 3035)
# Verify the projection is 'projected' not 'geographic'
st_crs(cities_sf3035) #Our output states "PROJCS" telling us it is projected 
```

### Question 1: 
*What are the measurement units of the `cities_sf3035` object?*
Measurement units can be found by tapping into the crs into 
```{r eval=FALSE}
st_crs(cities_sf3035)$units
```
The measurement units are in meters 


# Task 2: Create a buffer around each city and inspect the result

As each city and inscription corresponds to a dot on the map, the best way to grab and review the inscriptions will be by creating a buffer around each city point and then selecting inscriptions on the basis of that. 

```{r buff, eval=FALSE}
# Make buffer of 5 km. Check the units of your object to correctly assign value to dist
cities_5km<- st_buffer(cities_sf3035,dist = 5000)
# Plot the first 10 buffers and cities to check result 
plot(st_geometry(cities_5km)[1:10], col = "yellow")
plot(st_geometry(cities_sf3035)[1:10], pch=20, cex = 0.1, add = TRUE)
```


# Task 3: Verify the city buffers are indeed 5km in radius
Well, a quick review may look ok, but you cannot be sure your buffers work well until you add them to a map with a scale. Verify that your buffers are as big as should be by plotting a sample with tmap and adding a scale of good resolution.

```{r tmap, eval=FALSE}
# Grab the first 10 elements in the sf object and the buffer
ten_buffers <- cities_5km %>% slice(1:10)
ten_cities <- cities_sf3035 %>% slice(1:10)
?tm_credits

# Create a quick tmap
library(tmap)
current.mode <- tmap_mode("plot")
tm_shape(ten_buffers)  +
  tm_polygons(col = "#dd1c77") + #Here we're defining a colour for the polygon
  tm_shape(ten_cities) +
  tm_text("Ancient Toponym", size = 0.8, auto.placement = 5) + #Setting the size of the text to be readable
  tm_dots(col = "#c994c7", 
             size = 0.1) +
  tm_scale_bar(breaks = c(0, 10, 20), #This defines the scale of 0, 10 and 20km. The map units are in kms
               text.size = 10,
               position = c("LEFT", "bottom")) +
  tm_compass(position = c("LEFT", "bottom"), #Adding a compass onto the map 
             type = "rose", 
             size = 2) +
  tm_credits(position = c("LEFT", "bottom"), #This is setting the map credits - ensuring it doesn't overlap
             text = "Orla Mallon") +
  tm_layout(main.title = "Map with a scale", #Changing the background of the map 
            bg.color = "beige",
            inner.margins = c(0, 0, 0, 0))

#Nice - we have a map with pretty pink points :) 
```


We see a map, where the diameter of each city buffer corresponds to the 10km notch on the scale
            
# Task 4: Download ancient inscriptions and wrangle coordinates into shape 
Let's now look at some data that spatially co-occurs with these ancient places. Below is a link to an online dataset from the Epigraphic Database of Heidelberg of ancient inscriptions from one part of the ancient world. These inscriptions combine private and official expressions dedicated for personal reasons (death of a dear person) or public (dedication of a major building, placement of milestone, etc.). 

```{r inscriptions, eval=FALSE}
# Libraries
library(tidyverse)
library(jsonlite)
install.packages("tidytext")
library(tidytext)
# Download the file and save as inscriptions.json (consider commenting out after you first run to avoid repeat downloading)
download.file("https://sciencedata.dk/public/b6b6afdb969d378b70929e86e58ad975/EDH_subset_2021-02-15.json", "./inscriptions.json")
# Load it into R from wherever you put it, and convert into a tibble
list_json <- jsonlite::fromJSON("./inscriptions.json") #We have 12,266 obs of 74 variables 
inscriptions = as_tibble(list_json)

# Check the first couple lines and column names
head(inscriptions)
colnames(inscriptions) #This saves us having to scroll too far 
class(inscriptions$coordinates) #We have coordinates as a list 

# Wrangle the coordinates into a plottable  format
#First we'll split up the coordinates columns into 2 new ones called "latitude" and "longitude" - we'll wrangle them into numeric columns later 
i_sm <- inscriptions %>% 
  slice(1:100) %>% 
  separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
  mutate(latitude = latitude,
         longitude = longitude) 

#Inspect out split up variables - they're pretty messy so we'll want to clean these up
i_sm$longitude
i_sm$latitude 

#Use gsub() to remove the brackets, "c" and "" 
i_sm$latitude <- gsub(")", "", i_sm$latitude)
i_sm$longitude <- gsub("[c(]", "", i_sm$longitude) #Now we just have long numbers 

#They're character columns, so we'll make them numeric 
class(i_sm$longitude)
i_sm$latitude <- as.numeric(i_sm$latitude)
i_sm$longitude <- as.numeric(i_sm$longitude)

# Our columns are good to go so we'll check the result of the subset, does the location look reasonable?
leaflet() %>% addTiles() %>% addMarkers(lng=i_sm$longitude,lat=i_sm$latitude)
```


### Question 2: 
*Which part of the world are the inscriptions from?*
The inscriptions are located across Italy - which is unsurprising when we think of the history of the country and number of historical features left behind here.  

# Task 5: Convert inscriptions into an sf object
Now that the hard work is done, let's apply the wrangling to the full dataset and clean up the missing coordinates and outlier values.
```{r insc-sf, eval=FALSE}
#We're going to split up our wrangling into steps 
i <- inscriptions %>% 
  # Remove any lists in coordinates that are empty (i.e. have NAs)
  filter(coordinates != "list()") %>% 
  # Then separate coordinates column (as done in Task 4)
  separate(col = coordinates, into = c("longitude","latitude"), sep = ",") %>%
  # Making columns for latitude and longitude
  mutate(latitude = latitude, 
         longitude = longitude)

sum(is.na(i$longitude)) #We have no more NAs as we removed the empty lists first

#Inspect the data 
i$longitude 
i$latitude

#We want to clean up the columns and make them numeric
# Removing the "c(" from the longitude values and making them numeric
i$longitude <- gsub("[c(]", "", i$longitude) 
i$longitude <- as.numeric(i$longitude)

i$latitude <- gsub(")", "", i$latitude)
i$latitude <- as.numeric(i$latitude) #We have clean variables across the set now

#Finally we want to filter away data with longitude smaller than 5 and larger than 20
i <- i %>% filter(longitude > 5)
i <- i %>% filter(longitude < 20) #R does not seem to want to take 2 expressions together so we'll split them onto 2 lines 
min(i$longitude) #A quick check ensures we have no longitude values < 5 && > 20

# Create a sf object
insc_sf4326 <- st_as_sf(i, coords = c("longitude", "latitude"), crs = 4326)
# Plot
plot(st_geometry(insc_sf4326))
```

# Task 6: Select inscriptions that fall into the cities' buffer
Now that you have both the cities and inscriptions in the same CRS, you can pick the inscriptions which fall within 5km radius of the ancient places in order to locate "urban" inscriptions. Use the inverse st_difference to locate "rural" inscriptions.

```{r intersection, eval=FALSE}
# Project the sf object into EPSG3035 so it is consistent with cities and their buffers
crs_cities <- st_crs(cities_sf3035) #Create an object for the crs
insc_sf3035 <- st_transform(insc_sf4326, crs = crs_cities) #projecting out 4326 into the 3035 of cities 

# Create a convex hull around the inscriptions's points dissolved into a MULTIPOINT
insc_ch <- st_convex_hull(st_union(insc_sf3035)) #We need the st_union to combine them into one point

# Create a buffer from a cluster of cities that fall within the convex hull
st_crs(cities_5km) #Checking the crs of cities_5k ... it is a projected EPSG:3035 crs
cities_it <- st_intersection(insc_ch, st_transform(cities_5km, crs = crs_cities))

# Dissolve the 399 buffers into a single MULTIPOLYGON buffer feature
c_buff <- st_union(cities_it)

# Calculate the number of inscriptions in urban and rural areas. This may take a couple seconds
insc_urban <- st_intersection(insc_sf3035, c_buff)
insc_rural <- st_difference(insc_sf3035, c_buff)

#What do these look like? 
plot(st_geometry(insc_urban))
plot(st_geometry(insc_rural)) #There seem to be fewer rural inscriptions 

```

### Question 3: 
*What is the ratio of urban to rural inscriptions?*
From the outset it looks like there are many more urban inscriptions(10462obs) than rural (1604 obs) - but we can test this by simply comparing their lengths 
```{r eval=FALSE}
length(insc_urban$id) / length(insc_rural$id)
```
By simply dividing the Ids in the insc_urban by the id's in the insc_rural we see that there are 6.5 more urban inscriptions than rural ones - pretty cool huh? 

The next part of the assignment sounds very interesting, but I'm crazy busy so didn't manage to get to it :) 
